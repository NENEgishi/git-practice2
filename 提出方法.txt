『課題提出方法』
git init を使うとつかった場所に.gitファイルができる

↓

.gitファイルのある場所で、git add 
ファイル名
ファイル名は . にすればすべて選択することができる。

↓

git commit -m "コミットメッセージ"
これをしたあとにgit logをして直前に書いたコミットメッセージがあれば、commitに成功している

↓

git push リポジトリのurl master


リポジトリのurl
例）git@github.com:NENEgishi/webCamp_responsive.git

リポジトリのurlの登録
git remote add origin リポジトリのurl

↓

git push origin master


『8章【課題：アプリケーションを作成してみよう：基礎編】』
本章の概要
作成するWebアプリケーションの要件を確認する
Webアプリケーションを作成する
アプリケーションの要件
【Bookers】

テーマ： 読んだ本の感想を投稿するサイト

作成していただくアプリケーションは、以下のurlから見ることができます。
レイアウトや機能の実装について下記の要件と合わせて参考にしてください。
完成アプリケーションurl : https://bookers-level1.herokuapp.com/
※上記のアプリケーションは、1時間に一度投稿されたデータをリセットしています。

画面設計（デザイン / レイアウト）、画面遷移、機能を完成アプリケーションを参考にして考えましょう。
各機能についてはこれまでに学んだことを復習しつつ作成してください。
中にはこれまで学んでいないことも含まれております（例えば、ルートパスや投稿と一覧の機能を同じページに置くなど）。
これらは方法をネットで検索されたり、試行錯誤して実装を試みて下さい。
学習していないことをネットで調べ自ら手を動かし解決していくことは、今後、エンジニアとして必須のスキルとなります。

また、世の中にあるアプリケーションの多くは複数の機能(投稿機能、削除機能など)で構成されています。
どの機能から作るかは作る人によって異なります。しかし、作る優先度は必ずあります。
例えば、投稿がなければ一覧画面や詳細画面で編集機能や削除機能が正しく動作しているか確認することができません。
どの機能から作るか、その機能に必要な要素（コントローラー・ビュー・ルーティングなど）は何かを意識し、課題に取り組みましょう。
要件
【機能】
基本的に、上記の完成アプリケーションと同じにすること
ページごとのURL
ページに存在する各種リンク
本の投稿に関するモデルは「Book」とすること
Bookモデルには以下の名前でカラムを作成すること
title：本のタイトル
body：本の感想
読んだ本のタイトルと、その本についての感想を投稿・編集・削除ができること
本のタイトル、本の感想を空白で投稿したらバリデーションチェックされること
本のタイトル、本の感想を空白で投稿したら投稿画面にエラーメッセージが表示されること ※エラーメッセージの日本語化はしない
画面は下記の4つを作成すること
アプリケーショントップ画面
これまで「blogs」などディレクトリ名がトップ画面でしたが（例:http://localhost:3000/blogs/ ）、
トップ画面を「/」（例:http://localhost:3000/ ）で表示できるようにしましょう。
「/」はルートディレクトリといいます。
ルートディレクトリへのルーティング設定が必要になりますので、調べて実装してみましょう。
（例えば、検索キーワード「ルーティング ルート 設定 rails」など）
投稿一覧画面：投稿された本の感想を一覧表示する画面（一覧表示はIDの若い順に表示する）
️表形式で一覧表示するために、「tableタグ」を検索して、使ってみましょう！
投稿詳細画面：投稿された本の感想を個別に表示する画面
投稿編集画面：投稿された本の感想を編集できる画面
新規投稿後と編集後は、本の詳細画面に遷移すること
ルートパスを設定すること
投稿・更新成功後、サクセスメッセージを表示すること。
サクセスメッセージには、「successfully」をという文言を含めること。
【レイアウト / デザイン】
新規投稿フォームと投稿一覧表示をindexページ内に置くこと
投稿一覧表示にtableタグを用いること
